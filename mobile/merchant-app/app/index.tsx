import React, { useState, useEffect } from 'react'\nimport { View, ScrollView, StyleSheet, RefreshControl } from 'react-native'\nimport { \n  Card, \n  Title, \n  Paragraph, \n  Button, \n  Badge, \n  Chip,\n  FAB,\n  Portal,\n  Modal,\n  TextInput\n} from 'react-native-paper'\nimport { LineChart, BarChart } from 'react-native-chart-kit'\nimport { Dimensions } from 'react-native'\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons'\n\nconst { width } = Dimensions.get('window')\n\ninterface DashboardMetrics {\n  activeConversations: number\n  todayRevenue: number\n  conversionRate: number\n  avgResponseTime: number\n}\n\ninterface Conversation {\n  id: string\n  customerName: string\n  customerPhone: string\n  lastMessage: string\n  status: 'active' | 'negotiating' | 'waiting'\n  language: string\n  estimatedValue: number\n  timestamp: Date\n}\n\nconst MerchantDashboard = () => {\n  const [metrics, setMetrics] = useState<DashboardMetrics>({\n    activeConversations: 0,\n    todayRevenue: 0,\n    conversionRate: 0,\n    avgResponseTime: 0\n  })\n  \n  const [conversations, setConversations] = useState<Conversation[]>([])\n  const [refreshing, setRefreshing] = useState(false)\n  const [quickResponseModal, setQuickResponseModal] = useState(false)\n  const [newResponse, setNewResponse] = useState('')\n  const [selectedTrigger, setSelectedTrigger] = useState('')\n\n  // Mock data\n  const salesData = {\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    datasets: [{\n      data: [45, 52, 48, 61, 55, 67, 43],\n      strokeWidth: 3,\n      color: (opacity = 1) => `rgba(46, 125, 50, ${opacity})`\n    }]\n  }\n\n  const languageData = {\n    labels: ['Pidgin', 'English', 'Yoruba', 'Igbo'],\n    datasets: [{\n      data: [45, 35, 12, 8]\n    }]\n  }\n\n  const mockConversations: Conversation[] = [\n    {\n      id: '1',\n      customerName: 'Kemi Adebayo',\n      customerPhone: '+234801234567',\n      lastMessage: 'Abeg, the price too high o',\n      status: 'negotiating',\n      language: 'pidgin',\n      estimatedValue: 18000,\n      timestamp: new Date()\n    },\n    {\n      id: '2', \n      customerName: 'Ibrahim Hassan',\n      customerPhone: '+234703456789',\n      lastMessage: 'Do you have this in blue?',\n      status: 'active',\n      language: 'english',\n      estimatedValue: 25000,\n      timestamp: new Date()\n    }\n  ]\n\n  useEffect(() => {\n    loadDashboardData()\n  }, [])\n\n  const loadDashboardData = async () => {\n    // Simulate API call\n    setTimeout(() => {\n      setMetrics({\n        activeConversations: 247,\n        todayRevenue: 850000,\n        conversionRate: 68.5,\n        avgResponseTime: 285\n      })\n      setConversations(mockConversations)\n    }, 1000)\n  }\n\n  const onRefresh = async () => {\n    setRefreshing(true)\n    await loadDashboardData()\n    setRefreshing(false)\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return '#4CAF50'\n      case 'negotiating': return '#FF9800' \n      case 'waiting': return '#2196F3'\n      default: return '#757575'\n    }\n  }\n\n  const getLanguageFlag = (language: string) => {\n    switch (language) {\n      case 'pidgin': return 'üá≥üá¨'\n      case 'english': return 'üá¨üáß'\n      case 'yoruba': return 'üé≠'\n      case 'igbo': return 'ü¶Ö'\n      default: return 'üåç'\n    }\n  }\n\n  const handleTakeOver = (conversationId: string) => {\n    console.log('Taking over conversation:', conversationId)\n    // Navigate to conversation screen\n  }\n\n  const chartConfig = {\n    backgroundColor: '#ffffff',\n    backgroundGradientFrom: '#ffffff',\n    backgroundGradientTo: '#ffffff',\n    decimalPlaces: 0,\n    color: (opacity = 1) => `rgba(46, 125, 50, ${opacity})`,\n    labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n    style: { borderRadius: 16 }\n  }\n\n  return (\n    <View style={styles.container}>\n      <ScrollView \n        style={styles.scrollView}\n        refreshControl={\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        }\n      >\n        {/* Header */}\n        <Card style={styles.headerCard}>\n          <Card.Content>\n            <Title style={styles.headerTitle}>üó£Ô∏è YarnMarket AI</Title>\n            <Paragraph>Your AI assistant is handling {metrics.activeConversations} conversations</Paragraph>\n          </Card.Content>\n        </Card>\n\n        {/* Key Metrics */}\n        <View style={styles.metricsGrid}>\n          <Card style={[styles.metricCard, { backgroundColor: '#E3F2FD' }]}>\n            <Card.Content style={styles.metricContent}>\n              <Icon name=\"chat\" size={24} color=\"#1976D2\" />\n              <Title style={styles.metricNumber}>{metrics.activeConversations}</Title>\n              <Paragraph style={styles.metricLabel}>Active Chats</Paragraph>\n            </Card.Content>\n          </Card>\n\n          <Card style={[styles.metricCard, { backgroundColor: '#E8F5E8' }]}>\n            <Card.Content style={styles.metricContent}>\n              <Icon name=\"currency-ngn\" size={24} color=\"#388E3C\" />\n              <Title style={styles.metricNumber}>‚Ç¶{(metrics.todayRevenue / 1000).toFixed(0)}k</Title>\n              <Paragraph style={styles.metricLabel}>Today's Revenue</Paragraph>\n            </Card.Content>\n          </Card>\n\n          <Card style={[styles.metricCard, { backgroundColor: '#F3E5F5' }]}>\n            <Card.Content style={styles.metricContent}>\n              <Icon name=\"trending-up\" size={24} color=\"#7B1FA2\" />\n              <Title style={styles.metricNumber}>{metrics.conversionRate}%</Title>\n              <Paragraph style={styles.metricLabel}>Conversion</Paragraph>\n            </Card.Content>\n          </Card>\n\n          <Card style={[styles.metricCard, { backgroundColor: '#FFF3E0' }]}>\n            <Card.Content style={styles.metricContent}>\n              <Icon name=\"timer\" size={24} color=\"#F57C00\" />\n              <Title style={styles.metricNumber}>{metrics.avgResponseTime}ms</Title>\n              <Paragraph style={styles.metricLabel}>Response Time</Paragraph>\n            </Card.Content>\n          </Card>\n        </View>\n\n        {/* Sales Chart */}\n        <Card style={styles.chartCard}>\n          <Card.Content>\n            <Title>Weekly Sales</Title>\n            <LineChart\n              data={salesData}\n              width={width - 80}\n              height={200}\n              chartConfig={chartConfig}\n              bezier\n              style={styles.chart}\n            />\n          </Card.Content>\n        </Card>\n\n        {/* Language Distribution */}\n        <Card style={styles.chartCard}>\n          <Card.Content>\n            <Title>Customer Languages</Title>\n            <BarChart\n              data={languageData}\n              width={width - 80}\n              height={200}\n              chartConfig={chartConfig}\n              style={styles.chart}\n            />\n          </Card.Content>\n        </Card>\n\n        {/* Live Conversations */}\n        <Card style={styles.conversationsCard}>\n          <Card.Content>\n            <Title>Active Conversations</Title>\n            {conversations.map((conversation) => (\n              <Card key={conversation.id} style={styles.conversationItem}>\n                <Card.Content>\n                  <View style={styles.conversationHeader}>\n                    <View style={styles.customerInfo}>\n                      <Title style={styles.customerName}>{conversation.customerName}</Title>\n                      <View style={styles.conversationMeta}>\n                        <Chip \n                          mode=\"outlined\" \n                          style={[styles.statusChip, { borderColor: getStatusColor(conversation.status) }]}\n                          textStyle={{ color: getStatusColor(conversation.status) }}\n                        >\n                          {conversation.status}\n                        </Chip>\n                        <Paragraph style={styles.languageFlag}>\n                          {getLanguageFlag(conversation.language)}\n                        </Paragraph>\n                        <Paragraph style={styles.estimatedValue}>\n                          ‚Ç¶{conversation.estimatedValue.toLocaleString()}\n                        </Paragraph>\n                      </View>\n                    </View>\n                  </View>\n                  <Paragraph style={styles.lastMessage}>\n                    \"{conversation.lastMessage}\"\n                  </Paragraph>\n                  <View style={styles.conversationActions}>\n                    <Button \n                      mode=\"outlined\" \n                      compact \n                      onPress={() => handleTakeOver(conversation.id)}\n                      icon=\"account-switch\"\n                    >\n                      Take Over\n                    </Button>\n                    <Button mode=\"text\" compact icon=\"eye\">\n                      View Full\n                    </Button>\n                  </View>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Content>\n        </Card>\n      </ScrollView>\n\n      {/* Floating Action Button */}\n      <FAB\n        style={styles.fab}\n        icon=\"microphone\"\n        label=\"Train AI\"\n        onPress={() => setQuickResponseModal(true)}\n      />\n\n      {/* Quick Response Training Modal */}\n      <Portal>\n        <Modal \n          visible={quickResponseModal} \n          onDismiss={() => setQuickResponseModal(false)}\n          contentContainerStyle={styles.modal}\n        >\n          <Title>Train Your AI Assistant</Title>\n          <Paragraph style={styles.modalDescription}>\n            Record a custom response for your AI to use in similar situations.\n          </Paragraph>\n          \n          <TextInput\n            label=\"Trigger phrase\"\n            value={selectedTrigger}\n            onChangeText={setSelectedTrigger}\n            mode=\"outlined\"\n            style={styles.input}\n            placeholder=\"e.g., 'price too high'\"\n          />\n          \n          <TextInput\n            label=\"Your response\"\n            value={newResponse}\n            onChangeText={setNewResponse}\n            mode=\"outlined\"\n            multiline\n            numberOfLines={4}\n            style={styles.input}\n            placeholder=\"Type your response in Pidgin or English...\"\n          />\n          \n          <View style={styles.modalActions}>\n            <Button \n              mode=\"outlined\" \n              onPress={() => setQuickResponseModal(false)}\n              style={styles.modalButton}\n            >\n              Cancel\n            </Button>\n            <Button \n              mode=\"contained\" \n              onPress={() => {\n                console.log('Training AI with:', { selectedTrigger, newResponse })\n                setQuickResponseModal(false)\n                setSelectedTrigger('')\n                setNewResponse('')\n              }}\n              style={styles.modalButton}\n            >\n              Train AI\n            </Button>\n          </View>\n        </Modal>\n      </Portal>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  scrollView: {\n    flex: 1\n  },\n  headerCard: {\n    margin: 16,\n    backgroundColor: '#2E7D32'\n  },\n  headerTitle: {\n    color: 'white',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingHorizontal: 8\n  },\n  metricCard: {\n    width: '46%',\n    margin: '2%',\n    elevation: 2\n  },\n  metricContent: {\n    alignItems: 'center'\n  },\n  metricNumber: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginVertical: 4\n  },\n  metricLabel: {\n    fontSize: 12,\n    opacity: 0.7\n  },\n  chartCard: {\n    margin: 16,\n    elevation: 2\n  },\n  chart: {\n    marginVertical: 8,\n    borderRadius: 16\n  },\n  conversationsCard: {\n    margin: 16,\n    marginBottom: 100\n  },\n  conversationItem: {\n    marginVertical: 8,\n    elevation: 1\n  },\n  conversationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start'\n  },\n  customerInfo: {\n    flex: 1\n  },\n  customerName: {\n    fontSize: 16,\n    marginBottom: 4\n  },\n  conversationMeta: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8\n  },\n  statusChip: {\n    marginRight: 8,\n    height: 24\n  },\n  languageFlag: {\n    fontSize: 18,\n    marginRight: 8\n  },\n  estimatedValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#2E7D32'\n  },\n  lastMessage: {\n    fontStyle: 'italic',\n    marginBottom: 12,\n    color: '#666'\n  },\n  conversationActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n    backgroundColor: '#2E7D32'\n  },\n  modal: {\n    backgroundColor: 'white',\n    padding: 20,\n    margin: 20,\n    borderRadius: 8\n  },\n  modalDescription: {\n    marginBottom: 16,\n    color: '#666'\n  },\n  input: {\n    marginBottom: 16\n  },\n  modalActions: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    marginTop: 16\n  },\n  modalButton: {\n    marginLeft: 8\n  }\n})\n\nexport default MerchantDashboard"